#!/system/bin/sh

LOGFILE=$1
CMD=/system/bin/cmd
BB=/system/xbin/busybox
TB=/system/bin/toybox

if [ "$1" != "nosleep" ]; then
    echo "-- let's sleep first for 25 secs" | tee -a $LOGFILE
    sleep 25
fi

# avoid that core processes get killed
# not that this DOES NOT work for android app processes 
CNT=0
for pid in `$TB ps -e -o pid,user,args | $BB awk '{ if ($2 ~ /^root$|^system$|^radio$|^bluetooth$|^wifi$|^media$/) print $1 }'`; do
    if [ -e "/proc/$pid/oom_adj" ]; then
        CNT=$(( $CNT + 1 ))
        echo -17 > "/proc/$pid/oom_adj" 2>/dev/null
    fi
done
echo "-- avoiding that $CNT core processes get killed" | tee -a $LOGFILE

# Cgroups can be guaranteed a minimum number of "CPU shares"
# when a system is busy.  This does not limit a cgroup's CPU
# usage if the CPUs are not busy.  For further information, see
# Documentation/scheduler/sched-design-CFS.txt.

echo "-- mounting cpu controller on /dev/cpuctl" | tee -a $LOGFILE
# if it is already mounted, just ignore the error
$BB mount -t cgroup -o cpu none /dev/cpuctl 2>/dev/null

create_cgroup () {
    echo "-- creating cgroup $1" | tee -a $LOGFILE
    if [ ! -d "/dev/cpuctl/$1" ]; then
        # create a new empty group called $1
        $BB mkdir -p "/dev/cpuctl/$1" 2>/dev/null
        $BB chmod 775 "/dev/cpuctl/$1" 2>/dev/null
        $BB touch "/dev/cpuctl/$1/tasks" 2>/dev/null
        $BB chown 1000.1000 "/dev/cpuctl/$1/tasks" 2>/dev/null
        $BB chmod 777 "/dev/cpuctl/$1/tasks" 2>/dev/null
        # initially clear all taks and cgroup.procs
        $BB cp /dev/null "/dev/cpuctl/$1/tasks" 2>/dev/null
        $BB cp /dev/null "/dev/cpuctl/$1/cgroup.procs" 2>/dev/null
    fi
}

create_cgroup user
create_cgroup fg_boost
create_cgroup bg_non_interactive

IO_NONE=0
IO_REALTIME=1
IO_BEST_EFFORT=2
IO_IDLE=3

move_pid () {
    mPNAME=$1
    mPID=$2
    mGROUP=$3
    mIO_CLASS=$4
    mPRIO=$5
    mPRINT=$6
    $BB ionice -c "$mIO_CLASS" -n 4 -p "$mPID" 2>/dev/null
    OLDPRIO=`toybox ps -o nice -p "$mPID" | grep -v NI | sed 's/ //g'`
    DELTA=$(( $mPRIO - $OLDPRIO ))
    $BB renice -n "$DELTA" -p "$mPID"
    $BB echo "$mPID" >> "/dev/cpuctl/$mGROUP/cgroup.procs" 2>/dev/null
    for i in `ls "/proc/$mPID/task" 2>/dev/null`; do
        $BB echo $i >> "/dev/cpuctl/$mGROUP/tasks" 2>/dev/null
    done
    if [ ! "$mPRINT" == "false" ]; then
        echo "-- moving process '$mPNAME' ($mPID) to $mGROUP group [IO = $mIO_CLASS, PRIO = $OLDPRIO -> $mPRIO (delta: $DELTA)]" | tee -a $LOGFILE
    fi
}

# start with everybody being in the same cgroup, IO best effort and IO priority 4
CNT=0
for pid in `$BB ps | $BB awk '{ print $1 }'`; do
    CNT=$(( $CNT + 1 ))
    move_pid "" $pid user $IO_BEST_EFFORT 4 false
done
$BB echo 1 > /dev/cpuctl/user/cgroup.clone_children 2>/dev/null
echo "-- moving all $CNT processes to user group" | tee -a $LOGFILE

move_processes () {
    PLIST=$1
    GROUP=$2
    IO_CLASS=$3
    PRIO=$4
    for process in $PLIST; do
        # if process name is not found with pgrep for loop does not execute
        for pid in `$BB pgrep $process`; do
            move_pid $process $pid $GROUP $IO_CLASS $PRIO true
        done
    done
}

move_processes "zygote surfaceflinger fingerprint system_server" fg_boost "$IO_REALTIME" -8
move_processes "com.teslacoilsw.launcher android.process.acore com.android.systemui" fg_boost "$IO_REALTIME" -4
move_processes "kswapd0 loop logd" bg_non_interactive "$IO_BEST_EFFORT" 15

set_share () {
    echo $2 > "/dev/cpuctl/$1/cpu.shares" 2>/dev/null
    echo "-- setting CPU share for group $1 to $2" | tee -a $LOGFILE
}

echo "-- changing cpu.shares" | tee -a $LOGFILE
# 1024 is the default for /dev/cpuctl/cpu.shares
set_share bg_non_interactive 96
set_share user 1152
set_share fg_boost 1536
